#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Unsupervised Anomali Tespiti G√∂rselle≈ütirmeleri
KDD Cup 1999 - 04_network_anomaly_detection.ipynb sonu√ßlarƒ± i√ßin
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from matplotlib.patches import Rectangle
import matplotlib.patches as mpatches
from matplotlib.gridspec import GridSpec

# T√ºrk√ße font desteƒüi
plt.rcParams['font.family'] = ['DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False

# Renk paleti
colors = {
    'primary': '#2E86AB',
    'secondary': '#A23B72', 
    'accent': '#F18F01',
    'success': '#C73E1D',
    'warning': '#F4B942',
    'info': '#5D737E',
    'light': '#F5F5F5',
    'dark': '#2C3E50'
}

def create_unsupervised_performance_comparison():
    """
    Unsupervised algoritmalarƒ±n performans kar≈üƒ±la≈ütƒ±rmasƒ±
    """
    # Notebook'tan alƒ±nan sonu√ßlar
    data = {
        'Algorithm': ['K-means', 'DBSCAN', 'Isolation Forest', 'One-Class SVM', 'LOF'],
        'Accuracy': [0.214, 0.233, 0.975, 0.979, 0.980],
        'Precision': [0.736, 0.926, 0.976, 0.978, 0.979],
        'Recall': [0.045, 0.057, 0.994, 0.997, 0.997],
        'F1-Score': [0.086, 0.108, 0.985, 0.987, 0.988],
        'ROC-AUC': [0.811, 0.969, 0.944, 0.964, 0.974],
        'Detected_Anomalies': [500, 499, 8245, 8253, 8242]
    }
    
    df = pd.DataFrame(data)
    
    # B√ºy√ºk fig√ºr olu≈ütur
    fig = plt.figure(figsize=(20, 12))
    gs = GridSpec(3, 3, figure=fig, hspace=0.3, wspace=0.3)
    
    # Ana ba≈ülƒ±k
    fig.suptitle('Unsupervised Anomali Tespiti - Algoritma Performans Kar≈üƒ±la≈ütƒ±rmasƒ±\nKDD Cup 1999 Veri Seti', 
                 fontsize=20, fontweight='bold', y=0.95)
    
    # 1. F1-Score kar≈üƒ±la≈ütƒ±rmasƒ±
    ax1 = fig.add_subplot(gs[0, 0])
    bars1 = ax1.bar(df['Algorithm'], df['F1-Score'], 
                   color=[colors['primary'], colors['secondary'], colors['accent'], 
                         colors['success'], colors['warning']], alpha=0.8)
    ax1.set_title('F1-Score Kar≈üƒ±la≈ütƒ±rmasƒ±', fontsize=14, fontweight='bold')
    ax1.set_ylabel('F1-Score')
    ax1.set_ylim(0, 1.1)
    ax1.tick_params(axis='x', rotation=45)
    
    # Deƒüerleri bar √ºzerine yaz
    for bar, value in zip(bars1, df['F1-Score']):
        ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
                f'{value:.3f}', ha='center', va='bottom', fontweight='bold')
    
    # 2. ROC-AUC kar≈üƒ±la≈ütƒ±rmasƒ±
    ax2 = fig.add_subplot(gs[0, 1])
    bars2 = ax2.bar(df['Algorithm'], df['ROC-AUC'], 
                   color=[colors['primary'], colors['secondary'], colors['accent'], 
                         colors['success'], colors['warning']], alpha=0.8)
    ax2.set_title('ROC-AUC Kar≈üƒ±la≈ütƒ±rmasƒ±', fontsize=14, fontweight='bold')
    ax2.set_ylabel('ROC-AUC')
    ax2.set_ylim(0, 1.1)
    ax2.tick_params(axis='x', rotation=45)
    
    for bar, value in zip(bars2, df['ROC-AUC']):
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02, 
                f'{value:.3f}', ha='center', va='bottom', fontweight='bold')
    
    # 3. Precision vs Recall scatter
    ax3 = fig.add_subplot(gs[0, 2])
    scatter = ax3.scatter(df['Precision'], df['Recall'], 
                         c=[colors['primary'], colors['secondary'], colors['accent'], 
                           colors['success'], colors['warning']], 
                         s=200, alpha=0.8, edgecolors='black', linewidth=2)
    
    # Algoritma isimlerini ekle
    for i, txt in enumerate(df['Algorithm']):
        ax3.annotate(txt, (df['Precision'][i], df['Recall'][i]), 
                    xytext=(5, 5), textcoords='offset points', fontsize=10)
    
    ax3.set_xlabel('Precision')
    ax3.set_ylabel('Recall')
    ax3.set_title('Precision vs Recall', fontsize=14, fontweight='bold')
    ax3.grid(True, alpha=0.3)
    ax3.set_xlim(0, 1.05)
    ax3.set_ylim(0, 1.05)
    
    # 4. Tespit edilen anomali sayƒ±larƒ±
    ax4 = fig.add_subplot(gs[1, :])
    bars4 = ax4.bar(df['Algorithm'], df['Detected_Anomalies'], 
                   color=[colors['primary'], colors['secondary'], colors['accent'], 
                         colors['success'], colors['warning']], alpha=0.8)
    ax4.set_title('Tespit Edilen Anomali Sayƒ±larƒ±', fontsize=14, fontweight='bold')
    ax4.set_ylabel('Anomali Sayƒ±sƒ±')
    ax4.tick_params(axis='x', rotation=45)
    
    for bar, value in zip(bars4, df['Detected_Anomalies']):
        ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 100, 
                f'{value:,}', ha='center', va='bottom', fontweight='bold')
    
    # 5. Radar chart - En iyi 3 algoritma
    ax5 = fig.add_subplot(gs[2, :], projection='polar')
    
    # En iyi 3 algoritma (F1-Score'a g√∂re)
    top3 = df.nlargest(3, 'F1-Score')
    
    metrics = ['F1-Score', 'ROC-AUC', 'Precision', 'Recall', 'Accuracy']
    angles = np.linspace(0, 2*np.pi, len(metrics), endpoint=False).tolist()
    angles += angles[:1]  # D√∂ng√ºy√º kapat
    
    colors_radar = [colors['accent'], colors['success'], colors['warning']]
    
    for i, (idx, row) in enumerate(top3.iterrows()):
        values = [row['F1-Score'], row['ROC-AUC'], row['Precision'], row['Recall'], row['Accuracy']]
        values += values[:1]  # D√∂ng√ºy√º kapat
        
        ax5.plot(angles, values, 'o-', linewidth=2, label=row['Algorithm'], 
                color=colors_radar[i], markersize=8)
        ax5.fill(angles, values, alpha=0.25, color=colors_radar[i])
    
    ax5.set_xticks(angles[:-1])
    ax5.set_xticklabels(metrics)
    ax5.set_ylim(0, 1)
    ax5.set_title('En ƒ∞yi 3 Algoritma - √áok Boyutlu Performans', 
                 fontsize=14, fontweight='bold', pad=20)
    ax5.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))
    ax5.grid(True)
    
    # Genel bilgi kutusu
    info_text = (
        "üìä TEMEL BULGULAR:\n"
        "‚Ä¢ En ƒ∞yi Genel Performans: LOF (F1: 0.988)\n"
        "‚Ä¢ En Y√ºksek ROC-AUC: LOF (0.974)\n"
        "‚Ä¢ En Dengeli Sonu√ß: One-Class SVM\n"
        "‚Ä¢ K-means ve DBSCAN: D√º≈ü√ºk performans\n\n"
        "‚ö†Ô∏è  √ñNEMLI NOTLAR:\n"
        "‚Ä¢ Test seti: 10,000 √∂rnek (8,245 anomali)\n"
        "‚Ä¢ Contamination oranƒ±: %10\n"
        "‚Ä¢ PCA ile boyut indirgeme uygulandƒ±"
    )
    
    plt.figtext(0.02, 0.02, info_text, fontsize=11, 
                bbox=dict(boxstyle="round,pad=0.5", facecolor=colors['light'], alpha=0.8),
                verticalalignment='bottom')
    
    plt.tight_layout()
    plt.savefig('/Users/gunduz/Desktop/odev-kdd/reports/figures/unsupervised_anomaly_performance.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    plt.show()
    
    print("‚úÖ Unsupervised anomali tespiti performans kar≈üƒ±la≈ütƒ±rmasƒ± olu≈üturuldu!")

def create_algorithm_analysis_infographic():
    """
    Algoritma analizi infografiƒüi
    """
    fig, ax = plt.subplots(figsize=(16, 12))
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')
    
    # Ana ba≈ülƒ±k
    ax.text(5, 9.5, 'Unsupervised Anomali Tespiti Algoritmalarƒ±', 
            fontsize=24, fontweight='bold', ha='center')
    ax.text(5, 9.1, 'KDD Cup 1999 - Detaylƒ± Analiz ve Kar≈üƒ±la≈ütƒ±rma', 
            fontsize=16, ha='center', style='italic')
    
    # Algoritma kutularƒ±
    algorithms = [
        {
            'name': 'Local Outlier Factor (LOF)',
            'pos': (0.5, 7.5),
            'color': colors['warning'],
            'f1': '0.988',
            'auc': '0.974',
            'pros': ['En y√ºksek F1-Score', 'M√ºkemmel Recall (0.997)', 'Yerel yoƒüunluk analizi'],
            'cons': ['Hesaplama maliyeti y√ºksek', 'Parametre hassasiyeti']
        },
        {
            'name': 'One-Class SVM',
            'pos': (5.5, 7.5),
            'color': colors['success'],
            'f1': '0.987',
            'auc': '0.964',
            'pros': ['√áok iyi F1-Score', 'G√º√ßl√º teorik temel', 'Non-linear sƒ±nƒ±rlar'],
            'cons': ['Kernel se√ßimi kritik', 'B√ºy√ºk veri setlerinde yava≈ü']
        },
        {
            'name': 'Isolation Forest',
            'pos': (0.5, 5),
            'color': colors['accent'],
            'f1': '0.985',
            'auc': '0.944',
            'pros': ['Hƒ±zlƒ± eƒüitim', '√ñl√ßeklenebilir', 'Az parametre'],
            'cons': ['Orta seviye AUC', 'Y√ºksek boyutlarda zorlanƒ±r']
        },
        {
            'name': 'DBSCAN',
            'pos': (5.5, 5),
            'color': colors['secondary'],
            'f1': '0.108',
            'auc': '0.969',
            'pros': ['Y√ºksek Precision (0.926)', 'K√ºme ≈üekli esnekliƒüi'],
            'cons': ['√áok d√º≈ü√ºk Recall (0.057)', 'Parametre hassasiyeti']
        },
        {
            'name': 'K-means',
            'pos': (3, 2.5),
            'color': colors['primary'],
            'f1': '0.086',
            'auc': '0.811',
            'pros': ['Basit ve hƒ±zlƒ±', 'Az bellek kullanƒ±mƒ±'],
            'cons': ['En d√º≈ü√ºk performans', 'K√ºresel k√ºmeler varsayƒ±mƒ±']
        }
    ]
    
    for alg in algorithms:
        x, y = alg['pos']
        
        # Ana kutu
        rect = Rectangle((x, y), 4, 1.8, linewidth=2, 
                        edgecolor=alg['color'], facecolor=alg['color'], alpha=0.1)
        ax.add_patch(rect)
        
        # Algoritma adƒ±
        ax.text(x + 2, y + 1.5, alg['name'], fontsize=14, fontweight='bold', 
                ha='center', color=alg['color'])
        
        # Performans metrikleri
        ax.text(x + 0.1, y + 1.2, f"F1-Score: {alg['f1']}", fontsize=11, fontweight='bold')
        ax.text(x + 0.1, y + 1.0, f"ROC-AUC: {alg['auc']}", fontsize=11, fontweight='bold')
        
        # Avantajlar
        ax.text(x + 0.1, y + 0.7, "‚úÖ Avantajlar:", fontsize=10, fontweight='bold', color='green')
        for i, pro in enumerate(alg['pros']):
            ax.text(x + 0.2, y + 0.5 - i*0.15, f"‚Ä¢ {pro}", fontsize=9)
        
        # Dezavantajlar
        ax.text(x + 0.1, y + 0.1, "‚ùå Dezavantajlar:", fontsize=10, fontweight='bold', color='red')
        for i, con in enumerate(alg['cons']):
            ax.text(x + 0.2, y - 0.1 - i*0.15, f"‚Ä¢ {con}", fontsize=9)
    
    # Genel deƒüerlendirme kutusu
    eval_rect = Rectangle((0.5, 0.2), 9, 1.5, linewidth=2, 
                         edgecolor=colors['dark'], facecolor=colors['light'], alpha=0.8)
    ax.add_patch(eval_rect)
    
    ax.text(5, 1.5, 'üéØ GENEL DEƒûERLENDƒ∞RME VE √ñNERƒ∞LER', 
            fontsize=16, fontweight='bold', ha='center')
    
    recommendations = [
        "1. üèÜ En ƒ∞yi Se√ßim: LOF - T√ºm metriklerde √ºst√ºn performans",
        "2. ü•à ƒ∞kinci Se√ßenek: One-Class SVM - Dengeli ve g√ºvenilir sonu√ßlar",
        "3. ‚ö° Hƒ±z √ñnceliƒüi: Isolation Forest - Hƒ±zlƒ± ve etkili",
        "4. üéØ Y√ºksek Precision: DBSCAN - False positive'leri minimize eder",
        "5. ‚ùå √ñnerilmez: K-means - Bu veri seti i√ßin uygun deƒüil"
    ]
    
    for i, rec in enumerate(recommendations):
        ax.text(0.7, 1.2 - i*0.15, rec, fontsize=11)
    
    plt.tight_layout()
    plt.savefig('/Users/gunduz/Desktop/odev-kdd/reports/figures/unsupervised_algorithm_analysis.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    plt.show()
    
    print("‚úÖ Algoritma analizi infografiƒüi olu≈üturuldu!")

def create_methodology_summary():
    """
    Metodoloji √∂zeti g√∂rselle≈ütirmesi
    """
    fig, ax = plt.subplots(figsize=(14, 10))
    ax.set_xlim(0, 10)
    ax.set_ylim(0, 10)
    ax.axis('off')
    
    # Ana ba≈ülƒ±k
    ax.text(5, 9.5, 'Unsupervised Anomali Tespiti - Metodoloji', 
            fontsize=20, fontweight='bold', ha='center')
    ax.text(5, 9.1, 'KDD Cup 1999 Veri Seti √úzerinde Kapsamlƒ± Analiz', 
            fontsize=14, ha='center', style='italic')
    
    # Veri i≈üleme akƒ±≈üƒ±
    steps = [
        {'title': '1. VERƒ∞ √ñN ƒ∞≈ûLEME', 'pos': (1, 8), 'color': colors['primary'],
         'details': ['‚Ä¢ 494,021 eƒüitim √∂rneƒüi', '‚Ä¢ 41 √∂zellik', '‚Ä¢ StandardScaler normalizasyon', '‚Ä¢ PCA boyut indirgeme']},
        
        {'title': '2. MODEL Eƒûƒ∞Tƒ∞Mƒ∞', 'pos': (5, 8), 'color': colors['secondary'],
         'details': ['‚Ä¢ Sadece normal verilerle eƒüitim', '‚Ä¢ 5 farklƒ± algoritma', '‚Ä¢ Hiperparametre optimizasyonu', '‚Ä¢ Cross-validation']},
        
        {'title': '3. ANOMALI TESPƒ∞Tƒ∞', 'pos': (1, 5.5), 'color': colors['accent'],
         'details': ['‚Ä¢ Test seti: 10,000 √∂rnek', '‚Ä¢ Anomali skorlarƒ± hesaplama', '‚Ä¢ Threshold belirleme', '‚Ä¢ Binary sƒ±nƒ±flandƒ±rma']},
        
        {'title': '4. PERFORMANS DEƒûERLENDƒ∞RME', 'pos': (5, 5.5), 'color': colors['success'],
         'details': ['‚Ä¢ F1-Score, ROC-AUC', '‚Ä¢ Precision, Recall', '‚Ä¢ Confusion Matrix', '‚Ä¢ Algoritma kar≈üƒ±la≈ütƒ±rmasƒ±']}
    ]
    
    for step in steps:
        x, y = step['pos']
        
        # Ana kutu
        rect = Rectangle((x-0.5, y-1), 4, 2, linewidth=2, 
                        edgecolor=step['color'], facecolor=step['color'], alpha=0.1)
        ax.add_patch(rect)
        
        # Ba≈ülƒ±k
        ax.text(x+1.5, y+0.5, step['title'], fontsize=12, fontweight='bold', 
                ha='center', color=step['color'])
        
        # Detaylar
        for i, detail in enumerate(step['details']):
            ax.text(x-0.3, y+0.1-i*0.25, detail, fontsize=10)
    
    # Oklar
    ax.annotate('', xy=(4.5, 8), xytext=(3.5, 8), 
                arrowprops=dict(arrowstyle='->', lw=2, color=colors['dark']))
    ax.annotate('', xy=(1, 6.5), xytext=(1, 7), 
                arrowprops=dict(arrowstyle='->', lw=2, color=colors['dark']))
    ax.annotate('', xy=(4.5, 5.5), xytext=(3.5, 5.5), 
                arrowprops=dict(arrowstyle='->', lw=2, color=colors['dark']))
    
    # Sonu√ßlar kutusu
    results_rect = Rectangle((0.5, 1), 9, 2.5, linewidth=2, 
                           edgecolor=colors['warning'], facecolor=colors['warning'], alpha=0.1)
    ax.add_patch(results_rect)
    
    ax.text(5, 3, 'üìä TEMEL SONU√áLAR', fontsize=16, fontweight='bold', ha='center', color=colors['warning'])
    
    results = [
        "üèÜ En Ba≈üarƒ±lƒ±: LOF (F1-Score: 0.988, ROC-AUC: 0.974)",
        "‚ö° En Hƒ±zlƒ±: Isolation Forest (B√ºy√ºk veri setleri i√ßin ideal)",
        "üéØ En Hassas: DBSCAN (Precision: 0.926, az false positive)",
        "‚ùå En Zayƒ±f: K-means (F1-Score: 0.086, bu problem i√ßin uygun deƒüil)",
        "üìà Genel Trend: Ensemble y√∂ntemler daha ba≈üarƒ±lƒ±"
    ]
    
    for i, result in enumerate(results):
        ax.text(0.8, 2.6-i*0.25, result, fontsize=11)
    
    # √ñneriler
    ax.text(5, 0.7, 'üí° √ñNERƒ∞LER', fontsize=14, fontweight='bold', ha='center', color=colors['info'])
    ax.text(0.8, 0.4, "‚Ä¢ Ger√ßek zamanlƒ± sistemler i√ßin: Isolation Forest + LOF hibrit yakla≈üƒ±mƒ±", fontsize=10)
    ax.text(0.8, 0.2, "‚Ä¢ Y√ºksek hassasiyet gerekli: DBSCAN + manuel threshold ayarƒ±", fontsize=10)
    ax.text(0.8, 0.0, "‚Ä¢ Genel ama√ßlƒ± kullanƒ±m: LOF (en dengeli performans)", fontsize=10)
    
    plt.tight_layout()
    plt.savefig('/Users/gunduz/Desktop/odev-kdd/reports/figures/unsupervised_methodology_summary.png', 
                dpi=300, bbox_inches='tight', facecolor='white')
    plt.show()
    
    print("‚úÖ Metodoloji √∂zeti g√∂rselle≈ütirmesi olu≈üturuldu!")

if __name__ == "__main__":
    print("üé® Unsupervised Anomali Tespiti G√∂rselle≈ütirmeleri Olu≈üturuluyor...")
    print("=" * 60)
    
    # G√∂rselle≈ütirmeleri olu≈ütur
    create_unsupervised_performance_comparison()
    print()
    create_algorithm_analysis_infographic()
    print()
    create_methodology_summary()
    
    print("\n" + "=" * 60)
    print("‚úÖ T√ºm g√∂rselle≈ütirmeler ba≈üarƒ±yla olu≈üturuldu!")
    print("üìÅ Dosyalar: /Users/gunduz/Desktop/odev-kdd/reports/figures/")
    print("   ‚Ä¢ unsupervised_anomaly_performance.png")
    print("   ‚Ä¢ unsupervised_algorithm_analysis.png")
    print("   ‚Ä¢ unsupervised_methodology_summary.png")